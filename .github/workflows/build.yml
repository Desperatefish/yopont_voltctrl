name: Build RK3568 (qmake Release)

# ====== 触发条件 ======
on: [push, pull_request]

jobs:
  build:
    runs-on: self-hosted   # 自托管 runner

    env:
      # ====== 工具链与 qmake 路径（按你的实际修改）======
      TOOLCHAIN: /rk3568/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu
      GCC_BIN:  /rk3568/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/
      QMAKE:    /rk3568/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/Qt-5.14.2-arm64/bin/qmake

      # ====== 项目信息 ======
      PRO_FILE: modbus_tool.pro
      SHARE_DIR: /mnt/hgfs/share
      MAKEFLAGS: -j4

    steps:
      # 1) 配置 SSH（强制走 ssh.github.com:443）
      - name: Prepare SSH for GitHub
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}   # 你在 Secrets 里配置的私钥
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # 添加 GitHub 公钥，避免交互
          ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
          # 强制 github.com 映射到 ssh.github.com:443
          cat > ~/.ssh/config <<'EOF'
          Host github.com
            HostName ssh.github.com
            Port 443
            User git
          EOF
          chmod 600 ~/.ssh/config
          # 测试 SSH 是否可用
          ssh -T git@github.com || true

      # 2) 手动 clone 仓库（替代 actions/checkout）
      - name: Clone repository via SSH
        run: |
          rm -rf source
          git clone --depth=1 git@github.com:Desperatefish/yopont_voltctrl.git source
          cd source
          git log -1 --oneline

      # 3) 显示工具链与 qmake 信息
      - name: Show toolchain & qmake
        run: |
          export PATH="$GCC_BIN:$(dirname "$QMAKE"):$PATH"
          which aarch64-none-linux-gnu-gcc && aarch64-none-linux-gnu-gcc --version
          which aarch64-none-linux-gnu-g++
          [ -x "$QMAKE" ] || { echo "qmake not found at $QMAKE"; exit 1; }
          "$QMAKE" -v

      # 4) 干净构建目录
      - name: Clean build dir
        run: |
          rm -rf build
          mkdir -p build

      # 5) qmake 生成 Makefile（Release 配置）
      - name: Configure (qmake, Release)
        run: |
          export PATH="$GCC_BIN:$(dirname "$QMAKE"):$PATH"
          cd build
          "$QMAKE" "../source/$PRO_FILE" \
            CONFIG+=release \
            QMAKE_CC=aarch64-none-linux-gnu-gcc \
            QMAKE_CXX=aarch64-none-linux-gnu-g++ \
            QMAKE_LINK=aarch64-none-linux-gnu-g++ \
            QMAKE_AR="aarch64-none-linux-gnu-ar cqs" \
            QMAKE_OBJCOPY=aarch64-none-linux-gnu-objcopy \
            QMAKE_STRIP=aarch64-none-linux-gnu-strip

      # 6) 编译
      - name: Build
        run: |
          export PATH="$GCC_BIN:$(dirname "$QMAKE"):$PATH"
          cd build
          make

      # 7) （可选）strip 瘦身
      - name: Strip binaries (optional)
        run: |
          export PATH="$GCC_BIN:$(dirname "$QMAKE"):$PATH"
          if command -v aarch64-none-linux-gnu-strip >/dev/null 2>&1; then
            find build -type f -print0 | xargs -0 -I{} sh -c '
              if file -b "{}" | grep -qi "ELF .* aarch64"; then
                aarch64-none-linux-gnu-strip "{}" || true
              fi
            '
          fi

      # 8) 上传产物到 GitHub Artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: rk3568-build
          path: build/**
          if-no-files-found: warn

      # 9) （可选）拷到 VMware 共享目录
      - name: Copy to VMware share (optional)
        run: |
          if [ -d "$SHARE_DIR" ]; then
            mkdir -p "$SHARE_DIR/voltctrl-build"
            cp -a build/* "$SHARE_DIR/voltctrl-build/" || true
            echo "Copied to $SHARE_DIR/voltctrl-build/"
          else
            echo "Share dir $SHARE_DIR not found. Skip copy."
          fi
